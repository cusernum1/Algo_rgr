#include <iostream>
#include <forward_list>

using namespace std;

template <class T>
class Stack
{
private:
    forward_list<T> data; // Односвязный список для хранения данных стека

public:
    void push(const T& value); // Метод для добавления элемента в начало стека
    void pop(); // Метод для удаления элемента в начале стека
    T top(); // Метод для получения элемента находящегося в начале стека
    int size(); // Метод для получения размера стека
    bool empty(); // Метод для проверки на наличие элементов стека
};

template <class T>
void Stack<T>::push(const T& value)
{
    auto it = data.before_begin();
    data.insert_after(it, value);
}

template <class T>
void Stack<T>::pop()
{
    if (!data.empty())
        data.pop_front(); // Удаление верхнего элемента стека
    else
        cout << "Стек пуст!" << endl;
}

template <class T>
T Stack<T>::top()
{
    if (!data.empty())
        return data.front(); // Возвращает значение верхнего элемента стека
    else
        cout << "Стек пуст!" << endl;
}

template <class T>
bool Stack<T>::empty()
{
    return data.empty(); // Проверка на пустоту стека
}

template <class T>
int Stack<T>::size()
{
    if (!data.empty())
        return distance(data.begin(), data.end()); // Возвращает размер стека
    else
        return 0;
}

int main()
{
    setlocale(LC_ALL, "Russian");
    Stack<char> stack;

    int n;

    cout << "Введите количество элементов в стеке:" << endl;
    cin >> n;

    char c;

    cout << "Добавьте элементы в стек:" << endl;

    for (int i = 0; i < n; i++)
    {
        char s;
        cin >> s;
        stack.push(s);
    }

    cout << "Размер стека:" << endl;
    cout << stack.size() << endl;
    cout << "Проверка стека на пустоту:" << endl;
    cout << stack.empty() << endl;

    cout << "Элементы стека:" << endl;

    for (int i = 0; i < n; i++)
    {
        cout << stack.top() << endl;
        stack.pop();
    }

    cout << "После удаления всех элементов стека:" << endl;

    cout << "Размер стека:" << endl;
    cout << stack.size() << endl;
    cout << "Проверка стека на пустоту:" << endl;
    cout << stack.empty() << endl;

    return 0;
}
