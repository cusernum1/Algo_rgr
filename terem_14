14. Используя поиск в ширину, решите задачу.
(1343) На доске 8x8 некоторые клетки произвольным образом покрашены в черный цвет (кроме верхнего левого и правого нижнего угла доски). Требуется определить имеется ли путь для шахматного коня из верхнего левого в правый нижний угол доски, не проходящий по черным клеткам, и минимальное количество ходов, требующееся для этого.

#include <iostream>
#include <queue>
#include <vector>

using namespace std;

struct Cell {
	int x, y;
	Cell(int _x, int _y) : x(_x), y(_y) {}
};

bool cellOnBoard(int x, int y) {
	return (x >= 0 && x < 8 && y >= 0 && y < 8);
}

int minHorseStep(Cell start, Cell end, vector<vector<bool>>& blackCells) {
	// Возможные ходы коня
	int dx[] = { -2, -1, 1, 2, -2, -1, 1, 2 };
	int dy[] = { -1, -2, -2, -1, 1, 2, 2, 1 };

	queue<pair<Cell, int>> q;
	q.push({ start, 0 });

	vector<vector<bool>> visited(8, vector<bool>(8, false));
	visited[start.x][start.y] = true;

	while (!q.empty()) {
		Cell curr = q.front().first;
		int steps = q.front().second;
		q.pop();

		if (curr.x == end.x && curr.y == end.y)
			return steps;
		for (int i = 0; i < 8; ++i)
		{
			int nextX = curr.x + dx[i];
			int nextY = curr.y + dy[i];

			if (cellOnBoard(nextX, nextY) && !visited[nextX][nextY] && !blackCells[nextX][nextY])
			{
				q.push({ {nextX, nextY}, steps + 1 });
				visited[nextX][nextY] = true;
			}
		}
	}
}

